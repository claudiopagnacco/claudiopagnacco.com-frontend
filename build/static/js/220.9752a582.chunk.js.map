{"version":3,"file":"static/js/220.9752a582.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/is-buffer/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/hast-util-whitespace/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/index.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","isBuffer","stringify","values","settings","concat","_toConsumableArray","join","padRight","padLeft","trim","whitespace","thing","type","replace","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","code","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","Schema","_createClass","property","normal","space","_classCallCheck","this","merge","definitions","index","assign","own","create","definition","prop","properties","info","DefinedInfo","transform","attributes","mustUseProperty","includes","normalize","attribute","xlink","_","slice","toLowerCase","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","style","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","charAt","rest","camelcase","toUpperCase","dashes","kebab","$0","checks","keys","types","_Info","_inherits","_super","_createSuper","_this","mark","_assertThisInitialized","check","defined","powers","increment","Math","pow","emptyOptions","one","includeImageAlt","includeHtml","Boolean","node","all","children","splice","remove","items","parameters","chunkStart","unshift","apply","push","syntaxExtension","extension","hook","left","undefined","right","constructs","existing","before","add","factorySpace","effects","ok","limit","Number","POSITIVE_INFINITY","enter","consume","exit","tokenize","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","next","document","childFlow","childToken","lineStartOffset","self","stack","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","point","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","blankLine","partial","subtokenize","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","titleEscape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","titleConstruct","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","parse","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$1","$2","head","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","Error","stringifyPosition","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","ceil","preprocess","combined","_combined$key","_combined$key2","Parser","doc","normalizeUri","skip","encodeURIComponent","pointStart","pointEnd","clean","footnoteReference","counter","safeId","footnoteOrder","indexOf","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","source","last","lines","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","parent","loose","listLoose","child","root","table","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","_objectSpread","cache","visit","augment","hName","hProperties","hChildren","ctx","props","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","_tail$children","tailTail","dataFootnotes","JSON","footer","destination","file","run","error","bridge","mutate","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","_len","_key","middlewareIndex","callback","TypeError","fn","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","Promise","then","_len4","_key4","middelware","unified","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","Compiler","freeze","_attachers$freezeInde","_toArray","attacher","transformer","addPlugin","addList","addPreset","_value","plugin","plugins","isPlainObj","vfile","assertParser","newable","assertCompiler","assertNode","executor","reject","runSync","complete","assertDone","process","processSync","asyncName","looksLikeAVFile","VFile","pos","convert","castFactory","typeFactory","anyFactory","propsFactory","tests","_checks$index","visitParents","visitor","reverse","factory","parents","subresult","grandparents","toResult","VFileMessage","_Error","reason","place","parts","message","fatal","ruleId","actual","expected","note","_wrapNativeSuper","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","bufferLike","messages","history","stored","get","set","assertNonEmpty","assertPart","stem","part"],"sourceRoot":""}